CCS PCM C Compiler, Version 4.104, 5967               29-jun-24 20:44

               Filename: C:\Micro\TesteServo\rotinaServos.lst

               ROM used: 553 words (7%)
                         Largest free fragment is 2048
               RAM used: 26 (7%) at main() level
                         45 (12%) worst case
               Stack:    3 worst case (2 in main + 1 for interrupts)

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   14C
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BCF    03.7
0016:  BCF    03.5
0017:  BTFSS  0B.5
0018:  GOTO   01B
0019:  BTFSC  0B.2
001A:  GOTO   02C
001B:  MOVF   22,W
001C:  MOVWF  04
001D:  MOVF   23,W
001E:  MOVWF  77
001F:  MOVF   24,W
0020:  MOVWF  78
0021:  MOVF   25,W
0022:  MOVWF  79
0023:  MOVF   26,W
0024:  MOVWF  7A
0025:  MOVF   20,W
0026:  MOVWF  0A
0027:  SWAPF  21,W
0028:  MOVWF  03
0029:  SWAPF  7F,F
002A:  SWAPF  7F,W
002B:  RETFIE
002C:  BCF    0A.3
002D:  BCF    0A.4
002E:  GOTO   02F
.................... //#include "C:\Micro\processing\Rotina servos teste.h" 
.................... #include <16F877A.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
.................... #list 
....................  
.................... #device adc=8 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES HS                       //High speed Osc (> 4mhz for PCM/PCH) (>10mhz for PCD) 
.................... #FUSES NOPUT                    //No Power Up Timer 
.................... #FUSES NOPROTECT                //Code not protected from reading 
.................... #FUSES NODEBUG                  //No Debug mode for ICD 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOCPD                    //No EE protection 
.................... #FUSES NOWRT                    //Program memory not write protected 
.................... #FUSES RESERVED                 //Used to set the reserved FUSE bits 
....................  
.................... #use delay(clock=6000000) 
*
0137:  MOVLW  35
0138:  MOVWF  04
0139:  BCF    03.7
013A:  MOVF   00,W
013B:  BTFSC  03.2
013C:  GOTO   14B
013D:  MOVLW  01
013E:  MOVWF  78
013F:  CLRF   77
0140:  DECFSZ 77,F
0141:  GOTO   140
0142:  DECFSZ 78,F
0143:  GOTO   13F
0144:  MOVLW  F1
0145:  MOVWF  77
0146:  DECFSZ 77,F
0147:  GOTO   146
0148:  NOP
0149:  DECFSZ 00,F
014A:  GOTO   13D
014B:  RETURN
....................  
.................... #define use_servo_1 
.................... #define use_servo_2 
.................... #define use_servo_3 
....................  
.................... #define servo_1 PIN_B0 
.................... #define servo_2 PIN_B1 
.................... #define servo_3 PIN_B2 
....................  
.................... #include <servo_st.c> 
.................... /* #include <servo_st.c> 
.................... * 
.................... * Creada por: Ing. Abiezer Hernandez O. 
.................... * Fecha de creacion: 26/05/2020 
.................... * Electronica y Circuitos 
.................... * 
.................... */ 
....................  
.................... #define v_min 11 
.................... #define v_max 48 
....................  
.................... int16 cont_st = 0; 
.................... int8 pwm_st[10]; 
....................  
.................... #INT_TIMER0 
.................... void timer_0() 
.................... { 
....................    cont_st = cont_st + 1; 
*
002F:  MOVLW  01
0030:  ADDWF  27,F
0031:  BTFSC  03.0
0032:  INCF   28,F
....................    if(cont_st > 385) 
0033:  MOVF   28,W
0034:  SUBLW  00
0035:  BTFSC  03.0
0036:  GOTO   040
0037:  XORLW  FF
0038:  BTFSS  03.2
0039:  GOTO   03E
003A:  MOVF   27,W
003B:  SUBLW  81
003C:  BTFSC  03.0
003D:  GOTO   040
....................    { 
....................       cont_st = 0; 
003E:  CLRF   28
003F:  CLRF   27
....................    } 
....................    #ifdef use_servo_1 
....................    if(cont_st < pwm_st[0]){output_high(servo_1);} else{output_low(servo_1);} 
0040:  MOVF   28,F
0041:  BTFSS  03.2
0042:  GOTO   04C
0043:  MOVF   29,W
0044:  SUBWF  27,W
0045:  BTFSC  03.0
0046:  GOTO   04C
0047:  BSF    03.5
0048:  BCF    06.0
0049:  BCF    03.5
004A:  BSF    06.0
004B:  GOTO   050
004C:  BSF    03.5
004D:  BCF    06.0
004E:  BCF    03.5
004F:  BCF    06.0
....................    #endif 
....................     
....................    #ifdef use_servo_2 
....................    if(cont_st < pwm_st[1]){output_high(servo_2);} else{output_low(servo_2);} 
0050:  MOVF   28,F
0051:  BTFSS  03.2
0052:  GOTO   05C
0053:  MOVF   2A,W
0054:  SUBWF  27,W
0055:  BTFSC  03.0
0056:  GOTO   05C
0057:  BSF    03.5
0058:  BCF    06.1
0059:  BCF    03.5
005A:  BSF    06.1
005B:  GOTO   060
005C:  BSF    03.5
005D:  BCF    06.1
005E:  BCF    03.5
005F:  BCF    06.1
....................    #endif 
....................     
....................    #ifdef use_servo_3 
....................    if(cont_st < pwm_st[2]){output_high(servo_3);} else{output_low(servo_3);} 
0060:  MOVF   28,F
0061:  BTFSS  03.2
0062:  GOTO   06C
0063:  MOVF   2B,W
0064:  SUBWF  27,W
0065:  BTFSC  03.0
0066:  GOTO   06C
0067:  BSF    03.5
0068:  BCF    06.2
0069:  BCF    03.5
006A:  BSF    06.2
006B:  GOTO   070
006C:  BSF    03.5
006D:  BCF    06.2
006E:  BCF    03.5
006F:  BCF    06.2
....................    #endif 
....................     
....................    #ifdef use_servo_4 
....................    if(cont_st < pwm_st[3]){output_high(servo_4);} else{output_low(servo_4);} 
....................    #endif 
....................     
....................    #ifdef use_servo_5 
....................    if(cont_st < pwm_st[4]){output_high(servo_5);} else{output_low(servo_5);} 
....................    #endif 
....................     
....................    #ifdef use_servo_6 
....................    if(cont_st < pwm_st[5]){output_high(servo_6);} else{output_low(servo_6);} 
....................    #endif 
....................     
....................    #ifdef use_servo_7 
....................    if(cont_st < pwm_st[6]){output_high(servo_7);} else{output_low(servo_7);} 
....................    #endif 
....................     
....................    #ifdef use_servo_8 
....................    if(cont_st < pwm_st[7]){output_high(servo_8);} else{output_low(servo_8);} 
....................    #endif 
....................     
....................    #ifdef use_servo_9 
....................    if(cont_st < pwm_st[8]){output_high(servo_9);} else{output_low(servo_9);} 
....................    #endif 
....................     
....................    #ifdef use_servo_10 
....................    if(cont_st < pwm_st[9]){output_high(servo_10);} else{output_low(servo_10);} 
....................    #endif 
.................... } 
....................  
0070:  BCF    0B.2
0071:  BCF    0A.3
0072:  BCF    0A.4
0073:  GOTO   01B
.................... void servo_init() 
.................... { 
....................    setup_timer_0(RTCC_INTERNAL | RTCC_DIV_1); 
0074:  BSF    03.5
0075:  MOVF   01,W
0076:  ANDLW  C7
0077:  IORLW  08
0078:  MOVWF  01
....................    enable_interrupts(INT_TIMER0); 
0079:  BCF    03.5
007A:  BSF    0B.5
....................    enable_interrupts(GLOBAL); 
007B:  MOVLW  C0
007C:  IORWF  0B,F
....................    set_timer0(230); 
007D:  MOVLW  E6
007E:  MOVWF  01
.................... } 
007F:  BCF    0A.3
0080:  BCF    0A.4
0081:  GOTO   19D (RETURN)
....................  
.................... long map_int(int16 x, int16 eMin, int16 eMax, int16 sMin, int16 sMax) 
.................... { 
....................    return(x -eMin)*(sMax-sMin)/(eMax-eMin)+sMin; 
0082:  MOVF   37,W
0083:  SUBWF  35,W
0084:  MOVWF  3F
0085:  MOVF   36,W
0086:  MOVWF  40
0087:  MOVF   38,W
0088:  BTFSS  03.0
0089:  INCFSZ 38,W
008A:  SUBWF  40,F
008B:  MOVF   3B,W
008C:  SUBWF  3D,W
008D:  MOVWF  77
008E:  MOVF   3E,W
008F:  MOVWF  7A
0090:  MOVF   3C,W
0091:  BTFSS  03.0
0092:  INCFSZ 3C,W
0093:  SUBWF  7A,F
0094:  MOVF   77,W
0095:  MOVWF  41
0096:  MOVF   7A,W
0097:  MOVWF  42
0098:  MOVF   40,W
0099:  MOVWF  44
009A:  MOVF   3F,W
009B:  MOVWF  43
009C:  MOVF   42,W
009D:  MOVWF  46
009E:  MOVF   41,W
009F:  MOVWF  45
*
00B4:  MOVF   79,W
00B5:  MOVWF  40
00B6:  MOVF   78,W
00B7:  MOVWF  3F
00B8:  MOVF   37,W
00B9:  SUBWF  39,W
00BA:  MOVWF  77
00BB:  MOVF   3A,W
00BC:  MOVWF  7A
00BD:  MOVF   38,W
00BE:  BTFSS  03.0
00BF:  INCFSZ 38,W
00C0:  SUBWF  7A,F
00C1:  MOVF   77,W
00C2:  MOVWF  41
00C3:  MOVF   7A,W
00C4:  MOVWF  42
00C5:  MOVF   40,W
00C6:  MOVWF  44
00C7:  MOVF   3F,W
00C8:  MOVWF  43
00C9:  MOVF   42,W
00CA:  MOVWF  46
00CB:  MOVF   41,W
00CC:  MOVWF  45
*
00F1:  MOVF   79,W
00F2:  MOVWF  40
00F3:  MOVF   78,W
00F4:  MOVWF  3F
00F5:  MOVF   3B,W
00F6:  ADDWF  78,W
00F7:  MOVWF  78
00F8:  MOVF   79,W
00F9:  MOVWF  7A
00FA:  MOVF   3C,W
00FB:  BTFSC  03.0
00FC:  INCFSZ 3C,W
00FD:  ADDWF  7A,F
00FE:  MOVF   7A,W
00FF:  MOVWF  79
.................... } 
0100:  RETURN
....................  
.................... #ifdef use_servo_1 
.................... void servo_1_write(int angle1) 
.................... { 
....................    pwm_st[0] = map_int(angle1, 0, 180, v_min, v_max); 
0101:  CLRF   36
0102:  MOVF   34,W
0103:  MOVWF  35
0104:  CLRF   38
0105:  CLRF   37
0106:  CLRF   3A
0107:  MOVLW  B4
0108:  MOVWF  39
0109:  CLRF   3C
010A:  MOVLW  0B
010B:  MOVWF  3B
010C:  CLRF   3E
010D:  MOVLW  30
010E:  MOVWF  3D
010F:  CALL   082
0110:  MOVF   78,W
0111:  MOVWF  29
.................... } 
0112:  RETURN
.................... #endif 
....................  
.................... #ifdef use_servo_2 
.................... void servo_2_write(int angle2) 
.................... { 
....................    pwm_st[1] = map_int(angle2, 0, 180, v_min, v_max); 
0113:  CLRF   36
0114:  MOVF   34,W
0115:  MOVWF  35
0116:  CLRF   38
0117:  CLRF   37
0118:  CLRF   3A
0119:  MOVLW  B4
011A:  MOVWF  39
011B:  CLRF   3C
011C:  MOVLW  0B
011D:  MOVWF  3B
011E:  CLRF   3E
011F:  MOVLW  30
0120:  MOVWF  3D
0121:  CALL   082
0122:  MOVF   78,W
0123:  MOVWF  2A
.................... } 
0124:  RETURN
.................... #endif 
....................  
.................... #ifdef use_servo_3 
.................... void servo_3_write(int angle3) 
.................... { 
....................    pwm_st[2] = map_int(angle3, 0, 180, v_min, v_max); 
0125:  CLRF   36
0126:  MOVF   34,W
0127:  MOVWF  35
0128:  CLRF   38
0129:  CLRF   37
012A:  CLRF   3A
012B:  MOVLW  B4
012C:  MOVWF  39
012D:  CLRF   3C
012E:  MOVLW  0B
012F:  MOVWF  3B
0130:  CLRF   3E
0131:  MOVLW  30
0132:  MOVWF  3D
0133:  CALL   082
0134:  MOVF   78,W
0135:  MOVWF  2B
.................... } 
0136:  RETURN
.................... #endif 
....................  
.................... #ifdef use_servo_4 
.................... void servo_4_write(int angle4) 
.................... { 
....................    pwm_st[3] = map_int(angle4, 0, 180, v_min, v_max); 
.................... } 
.................... #endif 
....................  
.................... #ifdef use_servo_5 
.................... void servo_5_write(int angle5) 
.................... { 
....................    pwm_st[4] = map_int(angle5, 0, 180, v_min, v_max); 
.................... } 
.................... #endif 
....................  
.................... #ifdef use_servo_6 
.................... void servo_6_write(int angle6) 
.................... { 
....................    pwm_st[5] = map_int(angle6, 0, 180, v_min, v_max); 
.................... } 
.................... #endif 
....................  
.................... #ifdef use_servo_7 
.................... void servo_7_write(int angle7) 
.................... { 
....................    pwm_st[6] = map_int(angle7, 0, 180, v_min, v_max); 
.................... } 
.................... #endif 
....................  
.................... #ifdef use_servo_8 
.................... void servo_8_write(int angle8) 
.................... { 
....................    pwm_st[7] = map_int(angle8, 0, 180, v_min, v_max); 
.................... } 
.................... #endif 
....................  
.................... #ifdef use_servo_9 
.................... void servo_9_write(int angle9) 
.................... { 
....................    pwm_st[8] = map_int(angle9, 0, 180, v_min, v_max); 
.................... } 
.................... #endif 
....................  
.................... #ifdef use_servo_10 
.................... void servo_10_write(int angle10) 
.................... { 
....................    pwm_st[9] = map_int(angle10, 0, 180, v_min, v_max); 
.................... } 
.................... #endif 
....................  
.................... void main() 
.................... { 
*
014C:  CLRF   04
014D:  BCF    03.7
014E:  MOVLW  1F
014F:  ANDWF  03,F
0150:  CLRF   28
0151:  CLRF   27
0152:  BSF    03.5
0153:  BSF    1F.0
0154:  BSF    1F.1
0155:  BSF    1F.2
0156:  BCF    1F.3
0157:  MOVLW  07
0158:  MOVWF  1C
....................  
....................    setup_adc_ports(NO_ANALOGS); 
*
015C:  BSF    03.5
015D:  BSF    1F.0
015E:  BSF    1F.1
015F:  BSF    1F.2
0160:  BCF    1F.3
....................    setup_adc(ADC_CLOCK_DIV_2); 
0161:  BCF    1F.6
0162:  BCF    03.5
0163:  BCF    1F.6
0164:  BCF    1F.7
0165:  BSF    03.5
0166:  BCF    1F.7
0167:  BCF    03.5
0168:  BSF    1F.0
....................    setup_psp(PSP_DISABLED); 
0169:  BSF    03.5
016A:  BCF    09.4
....................    setup_spi(SPI_SS_DISABLED); 
016B:  BCF    03.5
016C:  BCF    14.5
016D:  BCF    33.5
016E:  MOVF   33,W
016F:  BSF    03.5
0170:  MOVWF  07
0171:  BCF    03.5
0172:  BSF    33.4
0173:  MOVF   33,W
0174:  BSF    03.5
0175:  MOVWF  07
0176:  BCF    03.5
0177:  BCF    33.3
0178:  MOVF   33,W
0179:  BSF    03.5
017A:  MOVWF  07
017B:  MOVLW  01
017C:  BCF    03.5
017D:  MOVWF  14
017E:  MOVLW  00
017F:  BSF    03.5
0180:  MOVWF  14
....................    setup_timer_0(RTCC_INTERNAL|RTCC_DIV_1); 
0181:  MOVF   01,W
0182:  ANDLW  C7
0183:  IORLW  08
0184:  MOVWF  01
....................    setup_timer_1(T1_DISABLED); 
0185:  BCF    03.5
0186:  CLRF   10
....................    setup_timer_2(T2_DISABLED,0,1); 
0187:  MOVLW  00
0188:  MOVWF  78
0189:  MOVWF  12
018A:  MOVLW  00
018B:  BSF    03.5
018C:  MOVWF  12
....................    setup_comparator(NC_NC_NC_NC); 
018D:  MOVLW  07
018E:  MOVWF  1C
018F:  MOVF   05,W
0190:  MOVWF  05
0191:  MOVLW  04
0192:  MOVWF  77
0193:  DECFSZ 77,F
0194:  GOTO   193
0195:  GOTO   196
0196:  MOVF   1C,W
0197:  BCF    03.5
0198:  BCF    0D.6
....................    setup_vref(FALSE); 
0199:  BSF    03.5
019A:  CLRF   1D
....................    // TODO: USER CODE!! 
....................     
....................    servo_init(); 
019B:  BCF    03.5
019C:  GOTO   074
....................    servo_1_write(0); 
019D:  CLRF   34
019E:  CALL   101
....................    servo_2_write(0); 
019F:  CLRF   34
01A0:  CALL   113
....................    servo_3_write(0); 
01A1:  CLRF   34
01A2:  CALL   125
....................    delay_ms(1000); 
01A3:  MOVLW  04
01A4:  MOVWF  34
01A5:  MOVLW  FA
01A6:  MOVWF  35
01A7:  CALL   137
01A8:  DECFSZ 34,F
01A9:  GOTO   1A5
....................     
....................    while(true) 
....................    { 
....................       servo_1_write(90); 
01AA:  MOVLW  5A
01AB:  MOVWF  34
01AC:  CALL   101
....................       delay_ms(1000); 
01AD:  MOVLW  04
01AE:  MOVWF  34
01AF:  MOVLW  FA
01B0:  MOVWF  35
01B1:  CALL   137
01B2:  DECFSZ 34,F
01B3:  GOTO   1AF
....................       servo_2_write(90); 
01B4:  MOVLW  5A
01B5:  MOVWF  34
01B6:  CALL   113
....................       delay_ms(1000); 
01B7:  MOVLW  04
01B8:  MOVWF  34
01B9:  MOVLW  FA
01BA:  MOVWF  35
01BB:  CALL   137
01BC:  DECFSZ 34,F
01BD:  GOTO   1B9
....................       servo_3_write(90); 
01BE:  MOVLW  5A
01BF:  MOVWF  34
01C0:  CALL   125
....................       delay_ms(1000); 
01C1:  MOVLW  04
01C2:  MOVWF  34
01C3:  MOVLW  FA
01C4:  MOVWF  35
01C5:  CALL   137
01C6:  DECFSZ 34,F
01C7:  GOTO   1C3
....................        
....................       servo_1_write(180); 
01C8:  MOVLW  B4
01C9:  MOVWF  34
01CA:  CALL   101
....................       delay_ms(1000); 
01CB:  MOVLW  04
01CC:  MOVWF  34
01CD:  MOVLW  FA
01CE:  MOVWF  35
01CF:  CALL   137
01D0:  DECFSZ 34,F
01D1:  GOTO   1CD
....................       servo_2_write(180); 
01D2:  MOVLW  B4
01D3:  MOVWF  34
01D4:  CALL   113
....................       delay_ms(1000); 
01D5:  MOVLW  04
01D6:  MOVWF  34
01D7:  MOVLW  FA
01D8:  MOVWF  35
01D9:  CALL   137
01DA:  DECFSZ 34,F
01DB:  GOTO   1D7
....................       servo_3_write(180); 
01DC:  MOVLW  B4
01DD:  MOVWF  34
01DE:  CALL   125
....................       delay_ms(1000); 
01DF:  MOVLW  04
01E0:  MOVWF  34
01E1:  MOVLW  FA
01E2:  MOVWF  35
01E3:  CALL   137
01E4:  DECFSZ 34,F
01E5:  GOTO   1E1
....................        
....................       servo_1_write(0); 
01E6:  CLRF   34
01E7:  CALL   101
....................       delay_ms(1000); 
01E8:  MOVLW  04
01E9:  MOVWF  34
01EA:  MOVLW  FA
01EB:  MOVWF  35
01EC:  CALL   137
01ED:  DECFSZ 34,F
01EE:  GOTO   1EA
....................       servo_2_write(90); 
01EF:  MOVLW  5A
01F0:  MOVWF  34
01F1:  CALL   113
....................       delay_ms(1000); 
01F2:  MOVLW  04
01F3:  MOVWF  34
01F4:  MOVLW  FA
01F5:  MOVWF  35
01F6:  CALL   137
01F7:  DECFSZ 34,F
01F8:  GOTO   1F4
....................       servo_3_write(90); 
01F9:  MOVLW  5A
01FA:  MOVWF  34
01FB:  CALL   125
....................       delay_ms(1000); 
01FC:  MOVLW  04
01FD:  MOVWF  34
01FE:  MOVLW  FA
01FF:  MOVWF  35
0200:  CALL   137
0201:  DECFSZ 34,F
0202:  GOTO   1FE
....................        
....................       servo_1_write(0); 
0203:  CLRF   34
0204:  CALL   101
....................       delay_ms(1000); 
0205:  MOVLW  04
0206:  MOVWF  34
0207:  MOVLW  FA
0208:  MOVWF  35
0209:  CALL   137
020A:  DECFSZ 34,F
020B:  GOTO   207
....................       servo_2_write(0); 
020C:  CLRF   34
020D:  CALL   113
....................       delay_ms(1000); 
020E:  MOVLW  04
020F:  MOVWF  34
0210:  MOVLW  FA
0211:  MOVWF  35
0212:  CALL   137
0213:  DECFSZ 34,F
0214:  GOTO   210
....................       servo_3_write(0); 
0215:  CLRF   34
0216:  CALL   125
....................       delay_ms(1000); 
0217:  MOVLW  04
0218:  MOVWF  34
0219:  MOVLW  FA
021A:  MOVWF  35
021B:  CALL   137
021C:  DECFSZ 34,F
021D:  GOTO   219
....................        
....................       servo_1_write(90); 
021E:  MOVLW  5A
021F:  MOVWF  34
0220:  CALL   101
....................       //delay_ms(1000); 
....................       servo_2_write(90); 
0221:  MOVLW  5A
0222:  MOVWF  34
0223:  CALL   113
....................       //delay_ms(1000); 
....................       servo_3_write(90); 
0224:  MOVLW  5A
0225:  MOVWF  34
0226:  CALL   125
....................       //delays_ms(1000); 
....................    } 
0227:  GOTO   1AA
.................... } 
0228:  SLEEP

Configuration Fuses:
   Word  1: 3F3A   HS NOWDT NOPUT NODEBUG NOPROTECT NOBROWNOUT NOLVP NOCPD NOWRT
