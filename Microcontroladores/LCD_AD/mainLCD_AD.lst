CCS PCM C Compiler, Version 4.104, 5967               02-abr-24 15:38

               Filename: C:\Users\julio\OneDrive\Documentos\Julio Cesar Jauer\Eng. da Comp. IFMT\Microcontroladores\LCD_AD\mainLCD_AD.lst

               ROM used: 1406 words (17%)
                         Largest free fragment is 2048
               RAM used: 16 (4%) at main() level
                         38 (10%) worst case
               Stack:    4 locations

*
0000:  MOVLW  04
0001:  MOVWF  0A
0002:  GOTO   486
0003:  NOP
.................... #include <16F877A.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
.................... #list 
....................  
....................  
.................... #device adc=10       // configuração do AD 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES HS                       //High speed Osc (> 4mhz for PCM/PCH) (>10mhz for PCD) 
.................... #FUSES NOPUT                    //No Power Up Timer 
.................... #FUSES NOPROTECT                //Code not protected from reading 
.................... #FUSES NODEBUG                  //No Debug mode for ICD 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOCPD        //No EE protection 
.................... #FUSES NOWRT                    //Program memory not write protected 
.................... #FUSES RESERVED                 //Used to set the reserved FUSE bits 
....................  
.................... #use delay(clock=20000000) 
*
0031:  MOVLW  35
0032:  MOVWF  04
0033:  BCF    03.7
0034:  MOVF   00,W
0035:  BTFSC  03.2
0036:  GOTO   044
0037:  MOVLW  06
0038:  MOVWF  78
0039:  CLRF   77
003A:  DECFSZ 77,F
003B:  GOTO   03A
003C:  DECFSZ 78,F
003D:  GOTO   039
003E:  MOVLW  7B
003F:  MOVWF  77
0040:  DECFSZ 77,F
0041:  GOTO   040
0042:  DECFSZ 00,F
0043:  GOTO   037
0044:  RETURN
....................  
.................... #ifndef lcd_enable 
....................    #define lcd_enable     pin_E1    // pino enable do LCD 
....................    #define lcd_rs         pin_E2    // pino rs do LCD 
....................    //#define lcd_rw         pin_A4    // pino rw do LCD 
....................    #define lcd_d4         pin_d4    // pino de dados d4 do LCD 
....................    #define lcd_d5         pin_d5    // pino de dados d5 do LCD 
....................    #define lcd_d6         pin_d6    // pino de dados d6 do LCD 
....................    #define lcd_d7         pin_d7    // pino de dados d7 do LCD 
.................... #endif 
....................  
.................... #include "mod_lcd.c" 
.................... /************************************************************************/ 
.................... /*  MOD_LCD.C - Biblioteca de manipulação de módulo LCD                 */ 
.................... /*                                                                      */ 
.................... /*  Autor: Fábio Pereira                                                */ 
.................... /*                                                                      */ 
.................... /************************************************************************/ 
....................  
.................... // As definições a seguir são utilizadas para acesso aos pinos do display 
.................... // caso o pino RW não seja utilizado, comente a definição lcd_rw 
.................... #ifndef lcd_enable 
.................... 	#define lcd_enable 		pin_e1		// pino enable do LCD 
.................... 	#define lcd_rs			pin_e0		// pino rs do LCD 
.................... 	//#define lcd_rw		pin_e2		// pino rw do LCD 
.................... 	#define lcd_d4			pin_d4		// pino de dados d4 do LCD 
.................... 	#define lcd_d5			pin_d5		// pino de dados d5 do LCD 
.................... 	#define lcd_d6			pin_d6		// pino de dados d6 do LCD 
.................... 	#define lcd_d7			pin_d7		// pino de dados d7 do LCD 
.................... #endif 
....................  
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 linhas 
.................... #define lcd_seg_lin 0x40    // Endereço da segunda linha na RAM do LCD 
....................  
.................... // a constante abaixo define a seqüência de inicialização do módulo LCD 
.................... byte CONST INI_LCD[4] = {0x20 | (lcd_type << 2), 0xf, 1, 6}; 
....................  
.................... byte lcd_le_byte() 
.................... // lê um byte do LCD (somente com pino RW) 
.................... { 
.................... 	byte dado; 
.................... 	// configura os pinos de dados como entradas 
.................... 	input(lcd_d4); 
.................... 	input(lcd_d5); 
.................... 	input(lcd_d6); 
.................... 	input(lcd_d7); 
.................... 	// se o pino rw for utilizado, coloca em 1 
.................... 	#ifdef lcd_rw 
.................... 		output_high(lcd_rw); 
.................... 	#endif 
....................    output_high(lcd_enable); // habilita display 
.................... 	dado = 0;	// zera a variável de leitura 
.................... 	// lê os quatro bits mais significativos 
.................... 	if (input(lcd_d7)) bit_set(dado,7); 
.................... 	if (input(lcd_d6)) bit_set(dado,6); 
.................... 	if (input(lcd_d5)) bit_set(dado,5); 
.................... 	if (input(lcd_d4)) bit_set(dado,4); 
.................... 	// dá um pulso na linha enable 
.................... 	output_low(lcd_enable); 
.................... 	output_high(lcd_enable); 
.................... 	// lê os quatro bits menos significativos 
.................... 	if (input(lcd_d7)) bit_set(dado,3); 
.................... 	if (input(lcd_d6)) bit_set(dado,2); 
.................... 	if (input(lcd_d5)) bit_set(dado,1); 
.................... 	if (input(lcd_d4)) bit_set(dado,0); 
.................... 	output_low(lcd_enable);	// desabilita o display 
.................... 	return dado;	// retorna o byte lido 
.................... } 
....................  
.................... void lcd_envia_nibble( byte dado ) 
.................... // envia um dado de quatro bits para o display 
.................... { 
.................... 	// coloca os quatro bits nas saidas 
.................... 	output_bit(lcd_d4,bit_test(dado,0)); 
0045:  BTFSC  3C.0
0046:  GOTO   049
0047:  BCF    08.4
0048:  GOTO   04A
0049:  BSF    08.4
004A:  BSF    03.5
004B:  BCF    08.4
.................... 	output_bit(lcd_d5,bit_test(dado,1)); 
004C:  BCF    03.5
004D:  BTFSC  3C.1
004E:  GOTO   051
004F:  BCF    08.5
0050:  GOTO   052
0051:  BSF    08.5
0052:  BSF    03.5
0053:  BCF    08.5
.................... 	output_bit(lcd_d6,bit_test(dado,2)); 
0054:  BCF    03.5
0055:  BTFSC  3C.2
0056:  GOTO   059
0057:  BCF    08.6
0058:  GOTO   05A
0059:  BSF    08.6
005A:  BSF    03.5
005B:  BCF    08.6
.................... 	output_bit(lcd_d7,bit_test(dado,3)); 
005C:  BCF    03.5
005D:  BTFSC  3C.3
005E:  GOTO   061
005F:  BCF    08.7
0060:  GOTO   062
0061:  BSF    08.7
0062:  BSF    03.5
0063:  BCF    08.7
.................... 	// dá um pulso na linha enable 
.................... 	output_high(lcd_enable); 
0064:  BCF    09.1
0065:  BCF    03.5
0066:  BSF    09.1
.................... 	output_low(lcd_enable); 
0067:  BSF    03.5
0068:  BCF    09.1
0069:  BCF    03.5
006A:  BCF    09.1
.................... } 
006B:  RETURN
....................  
....................  
.................... void lcd_envia_byte( boolean endereco, byte dado ) 
.................... { 
.................... 	// coloca a linha rs em 0 
.................... 	output_low(lcd_rs); 
006C:  BSF    03.5
006D:  BCF    09.2
006E:  BCF    03.5
006F:  BCF    09.2
.................... 	// aguarda o display ficar desocupado 
.................... 	//while ( bit_test(lcd_le_byte(),7) ) ; 
.................... 	// configura a linha rs dependendo do modo selecionado 
.................... 	output_bit(lcd_rs,endereco); 
0070:  MOVF   39,F
0071:  BTFSS  03.2
0072:  GOTO   075
0073:  BCF    09.2
0074:  GOTO   076
0075:  BSF    09.2
0076:  BSF    03.5
0077:  BCF    09.2
.................... 	delay_us(100);	// aguarda 100 us 
0078:  MOVLW  A6
0079:  MOVWF  77
007A:  DECFSZ 77,F
007B:  GOTO   07A
007C:  NOP
.................... 	// caso a linha rw esteja definida, coloca em 0 
.................... 	#ifdef lcd_rw 
.................... 		output_low(lcd_rw); 
.................... 	#endif 
.................... 	// desativa linha enable 
.................... 	output_low(lcd_enable); 
007D:  BCF    09.1
007E:  BCF    03.5
007F:  BCF    09.1
.................... 	// envia a primeira parte do byte 
.................... 	lcd_envia_nibble(dado >> 4); 
0080:  SWAPF  3A,W
0081:  MOVWF  3B
0082:  MOVLW  0F
0083:  ANDWF  3B,F
0084:  MOVF   3B,W
0085:  MOVWF  3C
0086:  CALL   045
.................... 	// envia a segunda parte do byte 
.................... 	lcd_envia_nibble(dado & 0x0f); 
0087:  MOVF   3A,W
0088:  ANDLW  0F
0089:  MOVWF  3B
008A:  MOVWF  3C
008B:  CALL   045
.................... } 
008C:  RETURN
....................  
....................  
.................... void lcd_ini() 
.................... // rotina de inicialização do display 
.................... { 
.................... 	byte conta; 
.................... 	output_low(lcd_d4); 
008D:  BSF    03.5
008E:  BCF    08.4
008F:  BCF    03.5
0090:  BCF    08.4
.................... 	output_low(lcd_d5); 
0091:  BSF    03.5
0092:  BCF    08.5
0093:  BCF    03.5
0094:  BCF    08.5
.................... 	output_low(lcd_d6); 
0095:  BSF    03.5
0096:  BCF    08.6
0097:  BCF    03.5
0098:  BCF    08.6
.................... 	output_low(lcd_d7); 
0099:  BSF    03.5
009A:  BCF    08.7
009B:  BCF    03.5
009C:  BCF    08.7
.................... 	output_low(lcd_rs); 
009D:  BSF    03.5
009E:  BCF    09.2
009F:  BCF    03.5
00A0:  BCF    09.2
.................... 	#ifdef lcd_rw 
.................... 		output_high(lcd_rw); 
.................... 	#endif 
.................... 	output_low(lcd_enable); 
00A1:  BSF    03.5
00A2:  BCF    09.1
00A3:  BCF    03.5
00A4:  BCF    09.1
.................... 	delay_ms(15); 
00A5:  MOVLW  0F
00A6:  MOVWF  35
00A7:  CALL   031
.................... 	// envia uma seqüência de 3 vezes 0x03 
.................... 	// e depois 0x02 para configurar o módulo 
.................... 	// para modo de 4 bits 
.................... 	for(conta=1;conta<=3;++conta) 
00A8:  MOVLW  01
00A9:  MOVWF  27
00AA:  MOVF   27,W
00AB:  SUBLW  03
00AC:  BTFSS  03.0
00AD:  GOTO   0B6
.................... 	{ 
.................... 		lcd_envia_nibble(3); 
00AE:  MOVLW  03
00AF:  MOVWF  3C
00B0:  CALL   045
.................... 		delay_ms(5); 
00B1:  MOVLW  05
00B2:  MOVWF  35
00B3:  CALL   031
.................... 	} 
00B4:  INCF   27,F
00B5:  GOTO   0AA
.................... 	lcd_envia_nibble(2); 
00B6:  MOVLW  02
00B7:  MOVWF  3C
00B8:  CALL   045
.................... 	// envia string de inicialização do display 
.................... 	for(conta=0;conta<=3;++conta) lcd_envia_byte(0,INI_LCD[conta]); 
00B9:  CLRF   27
00BA:  MOVF   27,W
00BB:  SUBLW  03
00BC:  BTFSS  03.0
00BD:  GOTO   0C7
00BE:  MOVF   27,W
00BF:  CALL   004
00C0:  MOVWF  28
00C1:  CLRF   39
00C2:  MOVF   28,W
00C3:  MOVWF  3A
00C4:  CALL   06C
00C5:  INCF   27,F
00C6:  GOTO   0BA
.................... } 
00C7:  BCF    0A.3
00C8:  BCF    0A.4
00C9:  GOTO   4DB (RETURN)
....................  
.................... void lcd_pos_xy( byte x, byte y) 
.................... { 
....................    byte endereco; 
....................    if(y!=1) 
*
00E4:  DECFSZ 36,W
00E5:  GOTO   0E7
00E6:  GOTO   0EA
....................    	endereco = lcd_seg_lin; 
00E7:  MOVLW  40
00E8:  MOVWF  37
....................    else 
00E9:  GOTO   0EB
....................    	endereco = 0; 
00EA:  CLRF   37
....................    endereco += x-1; 
00EB:  MOVLW  01
00EC:  SUBWF  35,W
00ED:  ADDWF  37,F
....................    lcd_envia_byte(0,0x80|endereco); 
00EE:  MOVF   37,W
00EF:  IORLW  80
00F0:  MOVWF  38
00F1:  CLRF   39
00F2:  MOVF   38,W
00F3:  MOVWF  3A
00F4:  CALL   06C
.................... } 
....................  
.................... void lcd_escreve( char c) 
.................... // envia caractere para o display 
.................... { 
....................    switch (c) 
.................... 	{ 
*
00CA:  MOVF   34,W
00CB:  XORLW  0C
00CC:  BTFSC  03.2
00CD:  GOTO   0D8
00CE:  XORLW  06
00CF:  BTFSC  03.2
00D0:  GOTO   0E0
00D1:  XORLW  07
00D2:  BTFSC  03.2
00D3:  GOTO   0E0
00D4:  XORLW  05
00D5:  BTFSC  03.2
00D6:  GOTO   0F6
00D7:  GOTO   0FB
....................      case '\f' 	:	lcd_envia_byte(0,1); 
00D8:  CLRF   39
00D9:  MOVLW  01
00DA:  MOVWF  3A
00DB:  CALL   06C
.................... 	  			delay_ms(2); 
00DC:  MOVLW  02
00DD:  MOVWF  35
00DE:  CALL   031
.................... 				break; 
00DF:  GOTO   101
....................      case '\n'	: 
.................... 	 case '\r' 	:	lcd_pos_xy(1,2); 
00E0:  MOVLW  01
00E1:  MOVWF  35
00E2:  MOVLW  02
00E3:  MOVWF  36
.................... 	  			break; 
*
00F5:  GOTO   101
....................      case '\b' 	:	lcd_envia_byte(0,0x10); 
00F6:  CLRF   39
00F7:  MOVLW  10
00F8:  MOVWF  3A
00F9:  CALL   06C
.................... 	  			break; 
00FA:  GOTO   101
....................      default	:	lcd_envia_byte(1,c); 
00FB:  MOVLW  01
00FC:  MOVWF  39
00FD:  MOVF   34,W
00FE:  MOVWF  3A
00FF:  CALL   06C
.................... 	  			break; 
0100:  GOTO   101
....................    } 
.................... } 
0101:  RETURN
....................  
.................... char lcd_le( byte x, byte y) 
.................... // le caractere do display 
.................... { 
.................... 	char valor; 
.................... 	// seleciona a posição do caractere 
.................... 	lcd_pos_xy(x,y); 
.................... 	// ativa rs 
.................... 	output_high(lcd_rs); 
.................... 	// lê o caractere 
.................... 	valor = lcd_le_byte(); 
.................... 	// desativa rs 
.................... 	output_low(lcd_rs); 
.................... 	// retorna o valor do caractere 
.................... 	return valor; 
.................... } 
....................  
....................  
.................... void main() 
.................... { 
*
0486:  CLRF   04
0487:  BCF    03.7
0488:  MOVLW  1F
0489:  ANDWF  03,F
048A:  BSF    03.5
048B:  BSF    1F.0
048C:  BSF    1F.1
048D:  BSF    1F.2
048E:  BCF    1F.3
048F:  MOVLW  07
0490:  MOVWF  1C
*
0494:  CLRF   22
0495:  CLRF   21
0496:  CLRF   26
0497:  CLRF   25
0498:  CLRF   24
0499:  CLRF   23
....................    unsigned int16 valor=0; 
....................    float tensao=0; 
....................     
....................    // configuração do AD 
....................    setup_adc_ports(AN0_AN1_AN3); 
049A:  BSF    03.5
049B:  BCF    1F.0
049C:  BCF    1F.1
049D:  BSF    1F.2
049E:  BCF    1F.3
....................    setup_adc(ADC_CLOCK_DIV_16); 
049F:  BSF    1F.6
04A0:  BCF    03.5
04A1:  BSF    1F.6
04A2:  BCF    1F.7
04A3:  BSF    03.5
04A4:  BSF    1F.7
04A5:  BCF    03.5
04A6:  BSF    1F.0
....................     
....................    setup_psp(PSP_DISABLED); 
04A7:  BSF    03.5
04A8:  BCF    09.4
....................    setup_spi(SPI_SS_DISABLED); 
04A9:  BCF    03.5
04AA:  BCF    14.5
04AB:  BCF    20.5
04AC:  MOVF   20,W
04AD:  BSF    03.5
04AE:  MOVWF  07
04AF:  BCF    03.5
04B0:  BSF    20.4
04B1:  MOVF   20,W
04B2:  BSF    03.5
04B3:  MOVWF  07
04B4:  BCF    03.5
04B5:  BCF    20.3
04B6:  MOVF   20,W
04B7:  BSF    03.5
04B8:  MOVWF  07
04B9:  MOVLW  01
04BA:  BCF    03.5
04BB:  MOVWF  14
04BC:  MOVLW  00
04BD:  BSF    03.5
04BE:  MOVWF  14
....................    setup_timer_0(RTCC_INTERNAL|RTCC_DIV_1); 
04BF:  MOVF   01,W
04C0:  ANDLW  C7
04C1:  IORLW  08
04C2:  MOVWF  01
....................    setup_timer_1(T1_DISABLED); 
04C3:  BCF    03.5
04C4:  CLRF   10
....................    setup_timer_2(T2_DISABLED,0,1); 
04C5:  MOVLW  00
04C6:  MOVWF  78
04C7:  MOVWF  12
04C8:  MOVLW  00
04C9:  BSF    03.5
04CA:  MOVWF  12
....................    setup_comparator(NC_NC_NC_NC);  
04CB:  MOVLW  07
04CC:  MOVWF  1C
04CD:  MOVF   05,W
04CE:  MOVWF  05
04CF:  MOVLW  10
04D0:  MOVWF  77
04D1:  DECFSZ 77,F
04D2:  GOTO   4D1
04D3:  NOP
04D4:  MOVF   1C,W
04D5:  BCF    03.5
04D6:  BCF    0D.6
....................    setup_vref(FALSE); 
04D7:  BSF    03.5
04D8:  CLRF   1D
....................     
....................    lcd_ini(); 
04D9:  BCF    03.5
04DA:  GOTO   08D
....................    delay_ms(50); 
04DB:  MOVLW  32
04DC:  MOVWF  35
04DD:  CALL   031
....................     
....................    set_adc_channel(0); 
04DE:  MOVLW  00
04DF:  MOVWF  78
04E0:  MOVF   1F,W
04E1:  ANDLW  C7
04E2:  IORWF  78,W
04E3:  MOVWF  1F
....................    delay_us(50); 
04E4:  MOVLW  53
04E5:  MOVWF  77
04E6:  DECFSZ 77,F
04E7:  GOTO   4E6
....................     
....................    lcd_escreve ('\f');  // Apaga (limpa) o display 
04E8:  MOVLW  0C
04E9:  MOVWF  34
04EA:  CALL   0CA
....................    printf (lcd_escreve,"   IFMT 2024    \r\n"); 
04EB:  MOVLW  0C
04EC:  BSF    03.6
04ED:  MOVWF  0D
04EE:  MOVLW  00
04EF:  MOVWF  0F
04F0:  BCF    03.6
04F1:  CALL   102
....................    printf (lcd_escreve,"   LCD e AD     "); 
04F2:  MOVLW  16
04F3:  BSF    03.6
04F4:  MOVWF  0D
04F5:  MOVLW  00
04F6:  MOVWF  0F
04F7:  BCF    03.6
04F8:  CALL   102
....................    delay_ms (2000); 
04F9:  MOVLW  08
04FA:  MOVWF  27
04FB:  MOVLW  FA
04FC:  MOVWF  35
04FD:  CALL   031
04FE:  DECFSZ 27,F
04FF:  GOTO   4FB
....................     
....................    while(true){ 
....................       valor = read_adc(); 
0500:  BSF    1F.2
0501:  BTFSC  1F.2
0502:  GOTO   501
0503:  BSF    03.5
0504:  MOVF   1E,W
0505:  BCF    03.5
0506:  MOVWF  21
0507:  MOVF   1E,W
0508:  MOVWF  22
....................       delay_us(50); 
0509:  MOVLW  53
050A:  MOVWF  77
050B:  DECFSZ 77,F
050C:  GOTO   50B
....................        
....................       printf(lcd_escreve,"\fA/D value = %Lu\n\r", valor);  
050D:  MOVLW  1F
050E:  BSF    03.6
050F:  MOVWF  0D
0510:  MOVLW  00
0511:  MOVWF  0F
0512:  BCF    03.0
0513:  MOVLW  0D
0514:  BCF    03.6
0515:  MOVWF  27
0516:  CALL   148
0517:  MOVLW  10
0518:  MOVWF  04
0519:  MOVF   22,W
051A:  MOVWF  28
051B:  MOVF   21,W
051C:  MOVWF  27
051D:  GOTO   196
051E:  MOVLW  0A
051F:  MOVWF  34
0520:  CALL   0CA
0521:  MOVLW  0D
0522:  MOVWF  34
0523:  CALL   0CA
....................       tensao =(float)valor*5/1023.; 
0524:  MOVF   22,W
0525:  MOVWF  28
0526:  MOVF   21,W
0527:  MOVWF  27
0528:  GOTO   1FB
0529:  MOVF   77,W
052A:  MOVWF  27
052B:  MOVF   78,W
052C:  MOVWF  28
052D:  MOVF   79,W
052E:  MOVWF  29
052F:  MOVF   7A,W
0530:  MOVWF  2A
0531:  MOVWF  37
0532:  MOVF   79,W
0533:  MOVWF  36
0534:  MOVF   78,W
0535:  MOVWF  35
0536:  MOVF   77,W
0537:  MOVWF  34
0538:  CLRF   3B
0539:  CLRF   3A
053A:  MOVLW  20
053B:  MOVWF  39
053C:  MOVLW  81
053D:  MOVWF  38
053E:  CALL   21A
053F:  MOVF   77,W
0540:  MOVWF  27
0541:  MOVF   78,W
0542:  MOVWF  28
0543:  MOVF   79,W
0544:  MOVWF  29
0545:  MOVF   7A,W
0546:  MOVWF  2A
0547:  MOVWF  2E
0548:  MOVF   79,W
0549:  MOVWF  2D
054A:  MOVF   78,W
054B:  MOVWF  2C
054C:  MOVF   77,W
054D:  MOVWF  2B
054E:  CLRF   32
054F:  MOVLW  C0
0550:  MOVWF  31
0551:  MOVLW  7F
0552:  MOVWF  30
0553:  MOVLW  88
0554:  MOVWF  2F
0555:  GOTO   28F
0556:  MOVF   7A,W
0557:  MOVWF  26
0558:  MOVF   79,W
0559:  MOVWF  25
055A:  MOVF   78,W
055B:  MOVWF  24
055C:  MOVF   77,W
055D:  MOVWF  23
....................       printf(lcd_escreve,"A/D (V) = %1.2f",tensao);  
055E:  MOVLW  29
055F:  BSF    03.6
0560:  MOVWF  0D
0561:  MOVLW  00
0562:  MOVWF  0F
0563:  BCF    03.0
0564:  MOVLW  0A
0565:  BCF    03.6
0566:  MOVWF  27
0567:  CALL   148
0568:  MOVLW  89
0569:  MOVWF  04
056A:  MOVF   26,W
056B:  MOVWF  2A
056C:  MOVF   25,W
056D:  MOVWF  29
056E:  MOVF   24,W
056F:  MOVWF  28
0570:  MOVF   23,W
0571:  MOVWF  27
0572:  MOVLW  02
0573:  MOVWF  2B
0574:  GOTO   39D
....................       delay_ms(300); 
0575:  MOVLW  02
0576:  MOVWF  27
0577:  MOVLW  96
0578:  MOVWF  35
0579:  CALL   031
057A:  DECFSZ 27,F
057B:  GOTO   577
....................    } 
057C:  GOTO   500
.................... } 
057D:  SLEEP

Configuration Fuses:
   Word  1: 3F3A   HS NOWDT NOPUT NODEBUG NOPROTECT NOBROWNOUT NOLVP NOCPD NOWRT
